/**********************************************************************
 Copyright (c) 2020-2023, Unitree Robotics.Co.Ltd. All rights reserved.
***********************************************************************/
#include "control/Estimator.h"
#include "common/mathTools.h"
#include "common/enumClass.h"
// #include "common/xingtianrobot.h"

#define RESET   "\033[0m"   // 重置颜色
#define RED     "\033[31m"  // 红色
#define GREEN   "\033[32m"  // 绿色
#define YELLOW  "\033[33m"  // 黄色
#define BLUE    "\033[34m"  // 蓝色
#define MAGENTA "\033[35m"  // 品红
#define CYAN    "\033[36m"  // 青色
#define WHITE   "\033[37m"  // 白色
#define BOLD    "\033[1m"   // 加粗
// 这个准备修改成线性卡尔曼状态估计
// 后期在interface中在读取一下gazebo中机器人真实的状态！
template <typename T>
Estimator<T>::Estimator(QuadrupedRobot<T> *robotModel, LowlevelState<T>* lowState, 
                     VecInt4 *contact, Vec4<T> *phase, T dt, Vec18<T> Qdig,
                     std::string testName)
          :_robModel(robotModel), _lowState(lowState), _contact(contact),
           _phase(phase), _dt(dt), _Qdig(Qdig), _estName(testName){
    // Qdig 过程噪声
    _initSystem();
}


template <typename T>
Estimator<T>::Estimator(QuadrupedRobot<T> *robotModel, LowlevelState<T>* lowState, 
                     VecInt4 *contact, Vec4<T> *phase, T dt)
          :_robModel(robotModel), _lowState(lowState), _contact(contact), 
           _phase(phase), _dt(dt){

    for(int i(0); i<_Qdig.rows(); ++i){
        if(i < 3){
            _Qdig(i) = 0.5;    //过程噪声
        }
        else if(i < 6){
            _Qdig(i) = 0.1;
        }
        else{
            _Qdig(i) = 0.1;
        }
    }

    _estName = "current";

    _initSystem();

}


template <typename T>
Estimator<T>::~Estimator(){
}
// 离散卡尔曼滤波，
template <typename T>
void Estimator<T>::_initSystem(){
    _g << 0, 0, -9.81;      //重力项 x y z
    // _largeVariance = 100;   //估计的误差初始化噪声
    _largeVariance = 10;
    _xhat.setZero();
    _u.setZero();     //输入向量
    _A.setZero();   //状态转移矩阵
    _A.block(0, 0, 3, 3) = _I3;   //起点，大小 表示左侧3*3矩阵 18*18矩阵
    _A.block(0, 3, 3, 3) = _I3 * _dt;
    _A.block(3, 3, 3, 3) = _I3;
    _A.block(6, 6, 12, 12) = I12;
    _B.setZero();   //输入矩阵  18*3
    _B.block(3, 0, 3, 3) = _I3 * _dt;

    _C.setZero();   //输出矩阵  28*18
    _C.block(0, 0, 3, 3) = -_I3;
    _C.block(3, 0, 3, 3) = -_I3;
    _C.block(6, 0, 3, 3) = -_I3;
    _C.block(9, 0, 3, 3) = -_I3;
    _C.block(12, 3, 3, 3) = -_I3;
    _C.block(15, 3, 3, 3) = -_I3;
    _C.block(18, 3, 3, 3) = -_I3;
    _C.block(21, 3, 3, 3) = -_I3;
    _C.block(0, 6, 12, 12) = I12;

    _C(24, 8) = 1;
    _C(25, 11) = 1;
    _C(26, 14) = 1;
    _C(27, 17) = 1;
    _P.setIdentity();   //预测协方差矩阵 p97页，会实时更新
    _P = _largeVariance * _P;    //*100表示初始值不可靠！！！
    //观测噪声协方差矩阵
     _RInit <<  0.004,-0.002,0.001,-0.003,0.002,0.001,0.003,-0.009,0.001,0.003,0.001,0.000,0.001,-0.001,0.001,0.000,-0.000,-0.000,-0.000,0.000,0.000,0.000,-0.000,-0.000,0.000,0.000,0.000,0.000
        ,-0.002,0.004,-0.000,0.001,-0.001,0.000,0.001,-0.001,0.000,0.001,-0.002,0.000,-0.000,0.000,-0.000,-0.000,0.000,0.000,-0.000,0.000,-0.000,-0.000,0.000,0.000,0.000,0.000,0.000,0.000
        ,0.001,-0.000,0.000,-0.000,-0.000,0.000,0.000,-0.002,0.000,0.001,-0.000,0.000,0.000,-0.000,0.000,0.000,-0.000,0.000,-0.000,0.000,0.000,0.000,-0.000,0.000,0.000,0.000,0.000,0.000
        ,-0.003,0.001,-0.000,0.004,-0.004,-0.000,-0.002,0.008,-0.000,-0.002,-0.001,-0.000,-0.000,0.001,-0.000,0.000,-0.000,0.000,0.000,-0.000,0.000,-0.000,-0.000,-0.000,0.000,0.000,0.000,0.000
        ,0.002,-0.001,-0.000,-0.004,0.008,-0.001,0.001,-0.002,-0.000,0.000,0.001,-0.001,0.000,0.000,0.000,0.000,0.000,-0.000,-0.000,0.000,-0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000
        ,0.001,0.000,0.000,-0.000,-0.001,0.000,0.001,-0.002,0.000,0.001,-0.000,0.000,0.000,-0.000,0.000,0.000,-0.000,0.000,-0.000,0.000,0.000,0.000,-0.000,-0.000,0.000,0.000,0.000,0.000
        ,0.003,0.001,0.000,-0.002,0.001,0.001,0.005,-0.013,0.001,0.004,-0.001,0.001,0.000,-0.000,-0.000,-0.000,-0.000,0.000,-0.000,0.000,-0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000
        ,-0.009,-0.001,-0.002,0.008,-0.002,-0.002,-0.013,0.037,-0.003,-0.011,0.001,-0.002,-0.001,0.002,-0.001,0.000,0.000,0.000,0.000,-0.000,0.000,-0.000,-0.000,-0.000,0.000,0.000,0.000,0.000
        ,0.001,0.000,0.000,-0.000,-0.000,0.000,0.001,-0.003,0.000,0.001,-0.000,0.000,0.000,-0.000,0.000,0.000,-0.000,0.000,-0.000,0.000,0.000,0.000,-0.000,0.000,0.000,0.000,0.000,0.000
        ,0.003,0.001,0.001,-0.002,0.000,0.001,0.004,-0.011,0.001,0.004,-0.001,0.001,0.000,-0.001,0.000,-0.000,-0.000,0.000,-0.000,0.000,-0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000
        ,0.001,-0.002,-0.000,-0.001,0.001,-0.000,-0.001,0.001,-0.000,-0.001,0.002,-0.000,0.000,-0.000,0.000,0.000,0.000,-0.000,0.000,-0.000,0.000,0.000,-0.000,-0.000,0.000,0.000,0.000,0.000
        ,0.000,0.000,0.000,-0.000,-0.001,0.000,0.001,-0.002,0.000,0.001,-0.000,0.000,0.000,-0.000,0.000,0.000,-0.000,0.000,-0.000,-0.000,0.000,0.000,-0.000,0.000,0.000,0.000,0.000,0.000
        ,0.001,-0.000,0.000,-0.000,0.000,0.000,0.000,-0.001,0.000,0.000,0.000,0.000,0.020,-0.031,0.021,0.003,0.000,0.002,0.003,0.001,-0.002,0.003,0.001,-0.002,0.000,0.000,0.000,0.000
        ,-0.001,0.000,-0.000,0.001,0.000,-0.000,-0.000,0.002,-0.000,-0.001,-0.000,-0.000,-0.031,0.065,-0.036,0.000,0.004,0.000,0.003,-0.002,-0.000,0.003,0.000,-0.002,0.000,0.000,0.000,0.000
        ,0.001,-0.000,0.000,-0.000,0.000,0.000,-0.000,-0.001,0.000,0.000,0.000,0.000,0.021,-0.036,0.033,0.003,-0.000,0.002,0.003,-0.001,-0.002,0.003,-0.000,-0.001,0.000,0.000,0.000,0.000
        ,0.000,-0.000,0.000,0.000,0.000,0.000,-0.000,0.000,0.000,-0.000,0.000,0.000,0.003,0.000,0.003,0.006,-0.003,0.002,0.003,0.001,-0.003,0.002,0.001,-0.002,0.000,0.000,0.000,0.000
        ,-0.000,0.000,-0.000,-0.000,0.000,-0.000,-0.000,0.000,-0.000,-0.000,0.000,-0.000,0.000,0.004,-0.000,-0.003,0.010,-0.001,0.003,-0.002,0.000,0.003,-0.001,-0.002,0.000,0.000,0.000,0.000
        ,-0.000,0.000,0.000,0.000,-0.000,0.000,0.000,0.000,0.000,0.000,-0.000,0.000,0.002,0.000,0.002,0.002,-0.001,0.005,0.001,0.002,-0.000,0.002,0.001,-0.001,0.000,0.000,0.000,0.000
        ,-0.000,-0.000,-0.000,0.000,-0.000,-0.000,-0.000,0.000,-0.000,-0.000,0.000,-0.000,0.003,0.003,0.003,0.003,0.003,0.001,0.010,-0.009,0.000,0.005,-0.001,-0.002,0.000,0.000,0.000,0.000
        ,0.000,0.000,0.000,-0.000,0.000,0.000,0.000,-0.000,0.000,0.000,-0.000,-0.000,0.001,-0.002,-0.001,0.001,-0.002,0.002,-0.009,0.017,-0.005,-0.003,0.005,-0.001,0.000,0.000,0.000,0.000
        ,0.000,-0.000,0.000,0.000,-0.000,0.000,-0.000,0.000,0.000,-0.000,0.000,0.000,-0.002,-0.000,-0.002,-0.003,0.000,-0.000,0.000,-0.005,0.013,-0.001,-0.002,0.002,0.000,0.000,0.000,0.000
        ,0.000,-0.000,0.000,-0.000,0.000,0.000,0.000,-0.000,0.000,0.000,0.000,0.000,0.003,0.003,0.003,0.002,0.003,0.002,0.005,-0.003,-0.001,0.005,-0.002,-0.001,0.000,0.000,0.000,0.000
        ,-0.000,0.000,-0.000,-0.000,0.000,-0.000,0.000,-0.000,-0.000,0.000,-0.000,-0.000,0.001,0.000,-0.000,0.001,-0.001,0.001,-0.001,0.005,-0.002,-0.002,0.006,-0.002,0.000,0.000,0.000,0.000
        ,-0.000,0.000,0.000,-0.000,0.000,-0.000,0.000,-0.000,0.000,0.000,-0.000,0.000,-0.002,-0.002,-0.001,-0.002,-0.002,-0.001,-0.002,-0.001,0.002,-0.001,-0.002,0.004,0.000,0.000,0.000,0.000
        ,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,1.000,0.000,0.000,0.000
        ,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,1.000,0.000,0.000
        ,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,1.000,0.000
        ,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,1.000;
    // 
    // _RInit <<82.812,-51.161,1.306,58.649,59.287,0.143,-35.894,60.718,1.100,-58.432,-44.745,0.647,-0.164,-12.187,0.940,27.423,-2.262,-27.261,-29.755,6.236,12.602,25.373,-12.723,20.559,0.000,0.000,0.000,0.000
    // ,-51.161,108.156,10.353,-48.726,-102.333,1.851,143.671,-98.984,1.859,163.780,91.243,7.891,11.616,-4.918,-6.017,3.579,12.743,-1.000,34.815,-13.011,10.522,-9.197,17.072,-2.699,0.000,0.000,0.000,0.000
    // ,1.306,10.353,7.367,-2.756,-6.328,-0.308,19.003,-8.706,2.778,15.889,11.697,0.168,8.294,-1.391,4.657,-20.510,8.398,-20.451,11.093,0.540,6.848,-9.512,5.261,-7.487,0.000,0.000,0.000,0.000
    // ,58.649,-48.726,-2.756,100.563,61.633,2.976,-48.572,100.555,-2.627,-52.160,-28.699,1.712,-22.255,-6.039,0.370,-0.118,43.533,33.180,2.092,14.504,-32.857,-27.497,22.028,-10.597,0.000,0.000,0.000,0.000
    // ,59.287,-102.333,-6.328,61.633,122.444,0.440,-143.736,120.667,0.776,-166.017,-79.258,-9.368,2.500,0.575,1.759,-38.946,2.034,-17.418,-5.182,1.118,7.747,-17.855,-16.980,2.196,0.000,0.000,0.000,0.000
    // ,0.143,1.851,-0.308,2.976,0.440,4.931,-1.305,4.544,-0.966,1.720,0.601,3.041,0.027,-3.648,-20.516,-3.570,3.415,-19.533,4.294,4.500,18.060,6.889,-14.989,-2.599,0.000,0.000,0.000,0.000
    // ,-35.894,143.671,19.003,-48.572,-143.736,-1.305,268.890,-141.572,6.459,246.884,162.587,12.741,25.896,-42.712,-6.172,-7.228,3.107,-37.707,11.221,-57.153,23.568,9.798,14.600,25.367,0.000,0.000,0.000,0.000
    // ,60.718,-98.984,-8.706,100.555,120.667,4.544,-141.572,173.789,-2.525,-170.941,-71.787,-7.917,-4.531,10.615,-22.221,-15.239,13.720,-3.217,26.410,16.899,31.559,-30.159,-4.501,8.404,0.000,0.000,0.000,0.000
    // ,1.100,1.859,2.778,-2.627,0.776,-0.966,6.459,-2.525,7.263,1.128,4.456,-1.590,0.233,-2.909,14.882,-30.928,17.328,6.384,7.117,-1.751,-31.753,-22.306,18.664,3.825,0.000,0.000,0.000,0.000
    // ,-58.432,163.780,15.889,-52.160,-166.017,1.720,246.884,-170.941,1.128,294.666,145.947,19.371,-26.158,-6.063,12.947,21.607,27.304,40.492,-0.652,0.779,-29.690,-3.603,25.586,-10.206,0.000,0.000,0.000,0.000
    // ,-44.745,91.243,11.697,-28.699,-79.258,0.601,162.587,-71.787,4.456,145.947,131.825,5.505,12.326,-10.368,16.383,-24.422,15.464,-19.662,9.677,-16.173,2.610,-4.012,7.845,-14.544,0.000,0.000,0.000,0.000
    // ,0.647,7.891,0.168,1.712,-9.368,3.041,12.741,-7.917,-1.590,19.371,5.505,8.409,-6.160,-12.124,-8.778,18.200,-8.353,-4.937,-6.233,-5.972,3.229,9.795,-11.197,18.239,0.000,0.000,0.000,0.000
    // ,-0.164,11.616,8.294,-22.255,2.500,0.027,25.896,-4.531,0.233,-26.158,12.326,-6.160,3996.601,-664.428,-1212.107,-1229.998,103.524,-555.677,2813.741,-572.365,492.948,-1223.030,65.642,267.081,0.000,0.000,0.000,0.000
    // ,-12.187,-4.918,-1.391,-6.039,0.575,-3.648,-42.712,10.615,-2.909,-6.063,-10.368,-12.124,-664.428,2124.398,962.419,1077.093,-587.666,567.240,-661.571,1738.329,-675.241,904.693,-431.729,-910.437,0.000,0.000,0.000,0.000
    // ,0.940,-6.017,4.657,0.370,1.759,-20.516,-6.172,-22.221,14.882,12.947,16.383,-8.778,-1212.107,962.419,4633.267,885.828,205.718,1320.789,-839.730,487.826,-1423.057,802.794,589.572,-481.969,0.000,0.000,0.000,0.000
    // ,27.423,3.579,-20.510,-0.118,-38.946,-3.570,-7.228,-15.239,-30.928,21.607,-24.422,18.200,-1229.998,1077.093,885.828,4863.739,-997.403,247.997,-1362.623,1048.236,-174.995,3651.398,-644.401,-1161.580,0.000,0.000,0.000,0.000
    // ,-2.262,12.743,8.398,43.533,2.034,3.415,3.107,13.720,17.328,27.304,15.464,-8.353,103.524,-587.666,205.718,-997.403,2735.357,924.036,241.301,-573.647,-1257.716,-733.344,2197.170,-580.101,0.000,0.000,0.000,0.000
    // ,-27.261,-1.000,-20.451,33.180,-17.418,-19.533,-37.707,-3.217,6.384,40.492,-19.662,-4.937,-555.677,567.240,1320.789,247.997,924.036,4955.367,-238.857,482.954,-1214.237,-266.916,1023.997,-548.941,0.000,0.000,0.000,0.000
    // ,-29.755,34.815,11.093,2.092,-5.182,4.294,11.221,26.410,7.117,-0.652,9.677,-6.233,2813.741,-661.571,-839.730,-1362.623,241.301,-238.857,4461.141,-727.188,207.992,-1763.378,101.813,419.250,0.000,0.000,0.000,0.000
    // ,6.236,-13.011,0.540,14.504,1.118,4.500,-57.153,16.899,-1.751,0.779,-16.173,-5.972,-572.365,1738.329,487.826,1048.236,-573.647,482.954,-727.188,2840.229,-352.264,1005.712,-750.563,-1324.556,0.000,0.000,0.000,0.000
    // ,12.602,10.522,6.848,-32.857,7.747,18.060,23.568,31.559,-31.753,-29.690,2.610,3.229,492.948,-675.241,-1423.057,-174.995,-1257.716,-1214.237,207.992,-352.264,5976.294,31.019,-1477.981,712.547,0.000,0.000,0.000,0.000
    // ,25.373,-9.197,-9.512,-27.497,-17.855,6.889,9.798,-30.159,-22.306,-3.603,-4.012,9.795,-1223.030,904.693,802.794,3651.398,-733.344,-266.916,-1763.378,1005.712,31.019,5083.091,-580.445,-1812.015,0.000,0.000,0.000,0.000
    // ,-12.723,17.072,5.261,22.028,-16.980,-14.989,14.600,-4.501,18.664,25.586,7.845,-11.197,65.642,-431.729,589.572,-644.401,2197.170,1023.997,101.813,-750.563,-1477.981,-580.445,2964.928,-358.616,0.000,0.000,0.000,0.000
    // ,20.559,-2.699,-7.487,-10.597,2.196,-2.599,25.367,8.404,3.825,-10.206,-14.544,18.239,267.081,-910.437,-481.969,-1161.580,-580.101,-548.941,419.250,-1324.556,712.547,-1812.015,-358.616,6031.393,0.000,0.000,0.000,0.000
    // ,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,1.000,0.000,0.000,0.000
    // ,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,1.000,0.000,0.000
    // ,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,1.000,0.000
    // ,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,1.000;
    /* xingtian Worked */
    // _Cu <<   268.573,  -43.819, -147.211,   //需要修改调整！！！  输入量U的协方差矩阵 IMU数据。状态噪声
    //         -43.819 ,  10.949 ,  58.082,
    //         -147.211,   58.082,  302.120;
    // _Cu <<    0.021,  0.031, -0.017,
    //         0.031,  0.078, -0.019,
    //         -0.017, -0.019,  0.035;
    // _Cu << 976927.477,  172692.796,  210404.230,
    // 172692.796,  940446.576, -160230.753,
    // 210404.230, -160230.753, 1271275.155;
    _Cu <<  11.910,  -1.896, -8.927,
            -1.896,  3.468, 1.429,
            -8.297, 1.429, 13.374;

    _QInit = _Qdig.asDiagonal();    //过程噪声，描述可能发生的随机误差，转化为对角的矩阵表达形式
    _QInit +=  _B * _Cu * _B.transpose();

    _RCheck  = new AvgCov<T>(28, _estName + " R");   //计算协方差，在每次开始的时候进行计算用，之后就不用了 p106页
    _uCheck  = new AvgCov<T>(3,  _estName + " u");     //_Cu
   

    _vxFilter = new LPFilter<T>(_dt, 3.0);
    _vyFilter = new LPFilter<T>(_dt, 3.0);
    _vzFilter = new LPFilter<T>(_dt, 3.0);


}
//基于卡尔曼滤波的状态估计器
template <typename T>
void Estimator<T>::run(){
    // 启动时，IMU的位置就是世界坐标系的原点
    _feetH.setZero();  //足端高度
    //获取当前机器人足端在全局坐标系下相对于机身的位置和速度 x y z
    _feetPosGlobalKine = _robModel->getFeet2BPositions(*_lowState, FrameType::GLOBAL);
    //////////获取足端速度在全局坐标系下的 xyz
    _feetVelGlobalKine= _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);  //3*4矩阵！
 
    _Q = _QInit;     //过程噪声，是固定值
    _R = _RInit;   //测量值协方差，通过AvgCov来计算.测试时需要进行修改调整


    for(int i(0); i < 4; ++i)
    {
        // 若未触地，噪声加大，不相信该腿的测量值
        if((*_contact)(i) == 0){
            _Q.block(6+3*i, 6+3*i, 3, 3) = _largeVariance * _I3;
            _R.block(12+3*i, 12+3*i, 3, 3) = _largeVariance * _I3;
            _R(24+i, 24+i) = _largeVariance;
        }
        else{ 
            _trust = windowFunc<T>((*_phase)(i), 0.2);    //是否触地，置信度
            _Q.block(6+3*i, 6+3*i, 3, 3) = (1 + (1-_trust)*_largeVariance) * _QInit.block(6+3*i, 6+3*i, 3, 3);
            _R.block(12+3*i, 12+3*i, 3, 3) = (1 + (1-_trust)*_largeVariance) * _RInit.block(12+3*i, 12+3*i, 3, 3);
            _R(24+i, 24+i) = (1 + (1-_trust)*_largeVariance) * _RInit(24+i, 24+i);
        }
        _feetPos2Body.segment(3*i, 3) = _feetPosGlobalKine.col(i);
 
        _feetVel2Body.segment(3*i, 3) = _feetVelGlobalKine.col(i);   //3*4 矩阵变成向量
    }

    _rotMatB2G = _lowState->getRotMat();  //从机身到全局坐标系下的旋转矩阵
    _u = _rotMatB2G * _lowState->getAcc() + _g;  //机身输入的加速度,转到世界坐标系下
    _xhat = _A * _xhat + _B * _u;      //状态方程 Ax + Bu
    _yhat = _C * _xhat;                 //观测方程 Cx
    _y << _feetPos2Body, _feetVel2Body, _feetH;    //观测值，对应p91页内容。世界坐标系下的相对于机身的足端位置和速度，足端高度
//把公式写出来就能推导！！！
    _Ppriori = _A * _P * _A.transpose() + _Q;      //_Ppriori为先验协方差预测 ,_P后验协方差矩阵
    _S =  _R + _C * _Ppriori * _C.transpose();   //残差的协方差矩阵 中间变量 p100，根据它来求解卡尔曼增益
    _Slu = _S.lu();     //进行矩阵lu分解，便于后续线性计算，求观测噪声的残差 LU 分解解决的是线性方程Ax=b，求解x。
    _Sy = _Slu.solve(_y - _yhat);          //计算残差    S.inverse*(_y - _yhat)
    _Sc = _Slu.solve(_C);                   //用于卡尔曼滤波增益  相当于S.inverse* _C
    _SR = _Slu.solve(_R);                   //观测噪声与状态预测之间的关联修正     S.inverse* _R
    _STC = (_S.transpose()).lu().solve(_C);//
    // _IKC = I18 - _Ppriori*_C.transpose()*_Sc;
    _IKC = I18 - _Ppriori.template cast<double>() * _C.transpose().template cast<double>() * _Sc.template cast<double>();
    _xhat += _Ppriori * _C.transpose() * _Sy;    //离散化后的状态方程，求解状态估计值

    _P =  _IKC * _Ppriori * _IKC.transpose()
        + _Ppriori * _C.transpose() * _SR * _STC * _Ppriori.transpose();   //协方差矩阵更新

    _vxFilter->addValue(_xhat(3));
    _vyFilter->addValue(_xhat(4));  
    _vzFilter->addValue(_xhat(5));
    // 状态估计器的位置估计的不对！！！！！！！！
    // std::cout << "状态估计器_U: " << _u << std::endl;


    std::cout <<RED<< "状态估计器xhat_PB: " << _xhat(0) << " " << _xhat(1) << " " << _xhat(2) <<RESET<< std::endl;
    std::cout <<YELLOW<< "状态估计器xhat_V: " << _xhat(3) << " " << _xhat(4) << " " << _xhat(5) <<RESET<< std::endl;
    // std::cout << "状态估计器xhat_P1: " << _xhat(6) << " " << _xhat(7) << " " << _xhat(8) << std::endl;
    // std::cout << "状态估计器xhat_P2: " << _xhat(9) << " " << _xhat(10) << " " << _xhat(11) << std::endl;
    // std::cout << "状态估计器xhat_P3: " << _xhat(12) << " " << _xhat(13) << " " << _xhat(14) << std::endl;
    // std::cout << "状态估计器xhat_P4: " << _xhat(15) << " " << _xhat(16) << " " << _xhat(17) << std::endl;
    
    // _RCheck->measure(_y);
    // _uCheck->measure(_u);
    
}
//返回机器人中心在世界坐标系下的位置
template <typename T>
Vec3<T> Estimator<T>::getPosition(){
    // std::cout << "状态估计器xhat_PG: " << _xhat(0) << " " << _xhat(1) << " " << _xhat(2) << std::endl;
    return _xhat.segment(0, 3);
}
//返回机器人中心当前速度
template <typename T>
Vec3<T> Estimator<T>::getVelocity(){
    return _xhat.segment(3, 3);
}
//返回机器人第i号脚在世界坐标系下的当前位置
template <typename T>
Vec3<T> Estimator<T>::getFootPos(int i){  
    // std::cout << "状态估计器xhat_FootposGLO: " << (getPosition() + _lowState->getRotMat() * _robModel->getFootPosition(*_lowState, i, FrameType::BODY)) << std::endl;
    return this->getPosition() + _lowState->getRotMat() * _robModel->getFootPosition(*_lowState, i, FrameType::BODY);
}
//返回所有机器人足端在世界坐标系下的位置
template <typename T>
Vec34<T> Estimator<T>::getFeetPos(){
    Vec34<T> feetPos;
    for(int i(0); i < 4; ++i){
        feetPos.col(i) =this-> getFootPos(i);
    }
    return feetPos;
}


template <typename T>
Vec34<T> Estimator<T>::cheater_getFeetVel(){
    Vec34<T> feetVel = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);
    for(int i(0); i < 4; ++i){
        feetVel.col(i) += this->cheater_getVelocity();
    }
    return feetVel;
}



//返回所有机器人足端在世界坐标系下的速度
template <typename T>
Vec34<T> Estimator<T>::getFeetVel(){
    Vec34<T> feetVel = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);
    for(int i(0); i < 4; ++i){
        feetVel.col(i) += this->getVelocity();
    }
    return feetVel;
}
//返回所有机器人足端在BODY坐标系下的位置
template <typename T>
Vec34<T> Estimator<T>::getPosFeet2BGlobal(){
    Vec34<T> feet2BPos;
    for(int i(0); i < 4; ++i){
        feet2BPos.col(i) = this->getFootPos(i) - this-> getPosition();
    }
    return feet2BPos;
}
template class Estimator<double>;
// template class Estimator<float>;
